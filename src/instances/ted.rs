use crate::edwards::{Curve, Params};

#[derive(PartialEq, Eq, Copy, Clone)]
pub struct EdCurveID(&'static Params);

impl EdCurveID {
    #[inline]
    pub fn get(self) -> Curve {
        Curve::from(self.0)
    }
}
impl std::fmt::Display for EdCurveID {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        write!(f, "{}", self.0.name)
    }
}

/// EDWARDS25519 is the edwards25519 elliptic curve as specified in RFC-7748.
pub static EDWARDS25519: EdCurveID = EdCurveID(&EDWARDS25519_PARAMS);
/// EDWARDS448 is the edwards448 elliptic curve as specified in RFC-7748.
pub static EDWARDS448: EdCurveID = EdCurveID(&EDWARDS448_PARAMS);

static EDWARDS25519_PARAMS: &Params = &Params {
    name: "edwards25519",
    p: "57896044618658097711785492504343953926634992332820282019728792003956564819949",
    a: "-1",
    d: "37095705934669439343138083508754565189542113879843219016388785533085940283555",
    r: "7237005577332262213973186563042994240857116359379907606001950938285454250989",
    h: "8",
    gx: "15112221349535400772501151409588531511454012693041857206046113283949847762202",
    gy: "46316835694926478169428394003475163141307993866256225615783033603165251855960",
};

static EDWARDS448_PARAMS: &Params = &Params {
    name: "edwards448",
    p: "726838724295606890549323807888004534353641360687318060281490199180612328166730772686396383698676545930088884461843637361053498018365439",
    a: "1",
    d: "-39081",
    r: "181709681073901722637330951972001133588410340171829515070372549795146003961539585716195755291692375963310293709091662304773755859649779",
    h: "4",
    gx: "224580040295924300187604334099896036246789641632564134246125461686950415467406032909029192869357953282578032075146446173674602635247710",
    gy: "298819210078481492676017930443930673437544040154080242095928241372331506189835876003536878655418784733982303233503462500531545062832660",
};
